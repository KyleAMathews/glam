import * as babylon from 'babylon'
import touch from 'touch'
import fs from 'fs'

import hashify from './hash'

function getName(str){
  let regex = /name\s*:\s*([A-Za-z0-9\-_]+)\s*/gm
  let match = regex.exec(str)
  if(match){
    return match[1]
  }
}

function parser(path) {
  let code = path.hub.file.code
  let strs = path.node.quasi.quasis.map(x => x.value.cooked)
  let hash = hashify(strs)
  let name = getName(strs.join('xxx'))
  if(name) {
    hash = `${name}-${hash}`
  }  

  let stubs = path.node.quasi.expressions.map(x => code.substring(x.start, x.end))          
  let ctr = 0

  let src = strs.reduce((arr, str, i) => {
    arr.push(str)
    if(i !== stubs.length) {
      arr.push(`var(--css-${hash}-${i})`)
    }
    return arr
  }, []).join('')
  let parsed = src.trim()
  return { hash, parsed, stubs }
}

module.exports = function({ types: t }){
  return {
    visitor: {
      Program(path, state){
        let injected = false
        let inserted = {}
        let file = path.hub.file.opts.filename
        state.inject = function(){
          if(!injected){
            injected = true
            touch.sync(file + '.css')
            fs.writeFileSync(file + '.css',  '/* do not edit this file */\n')            
            let impNode= babylon.parse(`import './${require('path').basename(file) + '.css'}';`, {sourceType: 'module', plugins: ['*']}).program.body[0]
            path.node.body.unshift(impNode)            
          }          
        }
        state.insert = function(hash, css){
          if(!inserted[hash]){
            inserted[hash] = true 
            fs.appendFileSync(file + '.css',  css + '\n')
          }
        }
      },
      TaggedTemplateExpression(path, state){
        let { tag } = path.node            
        let code = path.hub.file.code

        if(tag.name === 'css') {
          
          state.inject()
          
          let { hash, parsed, stubs } = parser(path)

          state.insert(hash, `.css-${hash} { ${parsed} }`)

          let cls = `'css-${hash}'`
          let dynamic = `[${stubs.join(', ')}]`
          let newSrc = stubs.length > 0 ? `css(${cls}, ${dynamic})` : `css(${cls})`

          path.replaceWith(babylon.parse(newSrc, {plugins: ['*']}).program.body[0].expression)
          
        }
      }
    }
  }
}